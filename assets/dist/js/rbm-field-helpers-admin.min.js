/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Main field class.
 *
 * @since 1.4.0
 */
var Field = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     * @param {string} type
     */
    function Field($field, type) {
        _classCallCheck(this, Field);

        this.$field = $field;
        this.$wrapper = $field.closest('.fieldhelpers-field');
        this.type = type;
        this.name = this.$wrapper.attr('data-fieldhelpers-name');
        this.instance = this.$wrapper.attr('data-fieldhelpers-instance');

        this.getRepeater();

        this.getOptions();

        if (this.repeater) {

            this.repeaterSupport();
        }

        // Put in global scope for other methods to interact with it
        if (typeof RBM_FieldHelpers[this.instance]['fieldObjects'] == 'undefined') {
            RBM_FieldHelpers[this.instance]['fieldObjects'] = {};
        }

        if (typeof RBM_FieldHelpers[this.instance]['fieldObjects'][this.type] == 'undefined') {
            RBM_FieldHelpers[this.instance]['fieldObjects'][this.type] = {};
        }

        RBM_FieldHelpers[this.instance]['fieldObjects'][this.type][this.name] = this;
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     */


    _createClass(Field, [{
        key: 'initField',
        value: function initField() {}

        /**
         * Gets field options.
         *
         * @since 1.4.0
         */

    }, {
        key: 'getOptions',
        value: function getOptions() {

            this.options = {};

            if (typeof RBM_FieldHelpers[this.instance] === 'undefined') {

                console.error('Field Helpers Error: Data for ' + this.instance + ' instance cannot be found.');
                return;
            }

            if (this.repeater) {

                if (typeof RBM_FieldHelpers[this.instance]['repeaterFields'][this.repeater] === 'undefined') {

                    console.error('Field Helpers Error: Data for repeater ' + this.type + ' sub-fields cannot be found.');
                    return;
                }

                if (typeof RBM_FieldHelpers[this.instance]['repeaterFields'][this.repeater][this.name] === 'undefined') {

                    console.error('Field Helpers Error: Cannot find field options for repeater ' + this.type + ' sub-field with name: ' + this.name + '.');
                    return;
                }

                this.options = RBM_FieldHelpers[this.instance]['repeaterFields'][this.repeater][this.name];
            } else {

                if (typeof RBM_FieldHelpers[this.instance][this.type] === 'undefined') {

                    console.error('Field Helpers Error: Data for ' + this.type + ' fields cannot be found.');
                    return;
                }

                if (typeof RBM_FieldHelpers[this.instance][this.type][this.name] === 'undefined') {

                    console.error('Field Helpers Error: Cannot find field options for ' + this.type + ' field with name: ' + this.name + '.');
                    return;
                }

                this.options = RBM_FieldHelpers[this.instance][this.type][this.name];
            }
        }

        /**
         * If field is in a Repeater, it will need support.
         *
         * @since 1.4.0
         */

    }, {
        key: 'getRepeater',
        value: function getRepeater() {

            if (this.$field.closest('[data-fieldhelpers-field-repeater]').length) {

                this.$repeater = this.$field.parent().closest('[data-fieldhelpers-field-repeater]');
                this.repeater = this.$repeater.closest('.fieldhelpers-field-repeater').attr('data-fieldhelpers-name');
            }
        }

        /**
         * Runs some functions if inside a Repeater.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterSupport',
        value: function repeaterSupport() {
            var _this = this;

            // Triggers fields can utilize. Wrapped in anonymous to utilize self access.
            this.$repeater.on('repeater-init', function () {
                _this.repeaterOnInit();
            });
            this.$repeater.on('repeater-before-add-item', function () {
                _this.repeaterBeforeAddItem();
            });
            this.$repeater.on('repeater-add-item', function () {
                _this.repeaterOnAddItem();
            });
            this.$field.closest('[data-repeater-item]').on('repeater-before-delete-item', function () {
                _this.repeaterBeforeDeleteSelf();
            });
            this.$repeater.on('repeater-before-delete-item', function () {
                _this.repeaterBeforeDeleteItem();
            });
            this.$repeater.on('repeater-delete-item', function () {
                _this.repeaterOnDeleteItem();
            });
            this.$repeater.find('.fieldhelpers-field-repeater-list').on('list-update', function () {
                _this.repeaterOnSort();
            });

            this.repeaterSetID();
            this.fieldCleanup();
        }

        /**
         * Fires on Repeater init.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterOnInit',
        value: function repeaterOnInit() {}

        /**
         * Fires before Repeater add item.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterBeforeAddItem',
        value: function repeaterBeforeAddItem() {}

        /**
         * Fires on Repeater add item.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterOnAddItem',
        value: function repeaterOnAddItem() {}

        /**
         * Fires before Repeater delete item (localized to self).
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterBeforeDeleteSelf',
        value: function repeaterBeforeDeleteSelf() {}

        /**
         * Fires before Repeater delete item.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterBeforeDeleteItem',
        value: function repeaterBeforeDeleteItem() {}

        /**
         * Fires on Repeater delete item.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterOnDeleteItem',
        value: function repeaterOnDeleteItem() {}

        /**
         * Fires on Repeat sort item.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterOnSort',
        value: function repeaterOnSort() {}

        /**
         * Sets the ID to be unique, based off the repeater item index.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterSetID',
        value: function repeaterSetID() {

            var index = this.$field.closest('[data-repeater-item]').index();
            var newID = this.options.id + '_' + index;

            this.$field.attr('id', newID);
        }

        /**
         * Cleans up after a repeater add/init.
         *
         * @since 1.4.0
         */

    }, {
        key: 'fieldCleanup',
        value: function fieldCleanup() {}

        /**
         * Sets the field to default. Override in child class if need different method.
         *
         * @since 1.4.0
         */

    }, {
        key: 'setDefault',
        value: function setDefault() {

            if (this.options.default) {

                this.$field.val(this.options.default).change();
            }
        }
    }]);

    return Field;
}();

exports.default = Field;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _fieldNumber = __webpack_require__(4);

var _fieldNumber2 = _interopRequireDefault(_fieldNumber);

var _fieldColorpicker = __webpack_require__(5);

var _fieldColorpicker2 = _interopRequireDefault(_fieldColorpicker);

var _fieldDatepicker = __webpack_require__(6);

var _fieldDatepicker2 = _interopRequireDefault(_fieldDatepicker);

var _fieldTimepicker = __webpack_require__(7);

var _fieldTimepicker2 = _interopRequireDefault(_fieldTimepicker);

var _fieldDatetimepicker = __webpack_require__(8);

var _fieldDatetimepicker2 = _interopRequireDefault(_fieldDatetimepicker);

var _fieldTable = __webpack_require__(9);

var _fieldTable2 = _interopRequireDefault(_fieldTable);

var _fieldMedia = __webpack_require__(10);

var _fieldMedia2 = _interopRequireDefault(_fieldMedia);

var _fieldList = __webpack_require__(11);

var _fieldList2 = _interopRequireDefault(_fieldList);

var _fieldRepeater = __webpack_require__(12);

var _fieldRepeater2 = _interopRequireDefault(_fieldRepeater);

var _fieldSelect = __webpack_require__(13);

var _fieldSelect2 = _interopRequireDefault(_fieldSelect);

var _fieldTextarea = __webpack_require__(14);

var _fieldTextarea2 = _interopRequireDefault(_fieldTextarea);

var _fieldCheckbox = __webpack_require__(15);

var _fieldCheckbox2 = _interopRequireDefault(_fieldCheckbox);

var _fieldRadio = __webpack_require__(16);

var _fieldRadio2 = _interopRequireDefault(_fieldRadio);

var _fieldToggle = __webpack_require__(17);

var _fieldToggle2 = _interopRequireDefault(_fieldToggle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Handles all field initializations.
 *
 * @since 1.4.0
 */
var FieldsInitialize =

/**
 * Class constructor.
 *
 * @since 1.4.0
 *
 * @param {jQuery} $root Root element to initialize fields inside.
 */
function FieldsInitialize($root) {
    _classCallCheck(this, FieldsInitialize);

    this.fields = {
        checkbox: new _fieldCheckbox2.default($root),
        toggle: new _fieldToggle2.default($root),
        radio: new _fieldRadio2.default($root),
        select: new _fieldSelect2.default($root),
        textarea: new _fieldTextarea2.default($root),
        number: new _fieldNumber2.default($root),
        colorpicker: new _fieldColorpicker2.default($root),
        datepicker: new _fieldDatepicker2.default($root),
        timepicker: new _fieldTimepicker2.default($root),
        datetimepicker: new _fieldDatetimepicker2.default($root),
        table: new _fieldTable2.default($root),
        media: new _fieldMedia2.default($root),
        list: new _fieldList2.default($root),
        repeater: new _fieldRepeater2.default($root)
    };
};

exports.default = FieldsInitialize;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(3);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _fieldsInit = __webpack_require__(1);

var _fieldsInit2 = _interopRequireDefault(_fieldsInit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Initialize app on jQuery Ready.
jQuery(function () {

	var Fields = new _fieldsInit2.default(jQuery(document));
});

// Re-init any fields within a container
window.rbmFHinitField = function ($root) {

	new _fieldsInit2.default($root);
};

// Grab Field Object from the RBM_FieldHelpers global in order to run methods on them
window.rbmFHgetFieldObject = function (name) {
	var instance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	var fieldType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;


	if (instance === null) {

		instance = jQuery('.fieldhelpers-field[data-fieldhelpers-name="' + name + '"]').data('fieldhelpers-instance');
	}

	if (fieldType === null) {

		var classNames = jQuery('.fieldhelpers-field[data-fieldhelpers-name="' + name + '"][data-fieldhelpers-instance="' + instance + '"]').first().attr('class');

		var test = /fieldhelpers-field-(\S*)/.exec(classNames);

		if (test !== null && test[1].length > 0) {

			fieldType = test[1];
		}
	}

	try {

		return RBM_FieldHelpers[instance]['fieldObjects'][fieldType][name];
	} catch (error) {

		if (instance === null || fieldType === null || RBM_FieldHelpers[instance]['fieldObjects'][fieldType][name].length < 0) {
			console.error('Field Helpers Error: Field Object for "' + name + '" Not Found');
		}

		return false;
	}
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Number Field functionality.
 *
 * @since 1.4.0
 */
var FieldNumber = function (_Field) {
    _inherits(FieldNumber, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldNumber($field) {
        _classCallCheck(this, FieldNumber);

        var _this = _possibleConstructorReturn(this, (FieldNumber.__proto__ || Object.getPrototypeOf(FieldNumber)).call(this, $field, 'number'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the Number field.
     *
     * @since 1.4.0
     */


    _createClass(FieldNumber, [{
        key: 'initField',
        value: function initField() {

            this.$ui = {
                container: this.$field,
                input: this.$field.find('.fieldhelpers-field-input'),
                increase: this.$field.find('[data-number-increase]'),
                decrease: this.$field.find('[data-number-decrease]')
            };

            this.intervals = {
                increase: {
                    normal: parseInt(this.options.increaseInterval),
                    alt: parseInt(this.options.altIncreaseInterval)
                },
                decrease: {
                    normal: parseInt(this.options.decreaseInterval),
                    alt: parseInt(this.options.altDecreaseInterval)
                }
            };

            var constrainMax = this.options.max;
            var constrainMin = this.options.min;

            this.constraints = {
                max: constrainMax !== 'none' ? parseInt(constrainMax) : false,
                min: constrainMin !== 'none' ? parseInt(constrainMin) : false
            };

            this.shiftKeyUtility();
            this.setupHandlers();

            var initialValue = this.$ui.input.val();
            this.value = !initialValue ? 0 : parseInt(initialValue);

            // Initializes the field
            this.validateInput();
        }

        /**
         * Helps determine shift key press status.
         *
         * @since 1.4.0
         */

    }, {
        key: 'shiftKeyUtility',
        value: function shiftKeyUtility() {
            var _this2 = this;

            this.shiftKeyDown = false;

            jQuery(document).on('keydown', function (e) {

                if (e.which === 16) {

                    _this2.shiftKeyDown = true;
                }
            });

            jQuery(document).on('keyup', function (e) {

                if (e.which === 16) {

                    _this2.shiftKeyDown = false;
                }
            });
        }

        /**
         * Sets up the class handlers.
         *
         * @since 1.4.0
         */

    }, {
        key: 'setupHandlers',
        value: function setupHandlers() {
            var _this3 = this;

            this.$ui.increase.click(function (e) {

                _this3.increaseNumber(e);
            });

            this.$ui.decrease.click(function (e) {

                _this3.decreaseNumber(e);
            });

            this.$ui.input.change(function (e) {

                _this3.inputExternalChange(e);
            });
        }

        /**
         * Increases the input number.
         *
         * @since 1.4.0
         */

    }, {
        key: 'increaseNumber',
        value: function increaseNumber() {

            var amount = this.shiftKeyDown ? this.intervals.increase.alt : this.intervals.increase.normal;
            var newNumber = this.value + amount;

            this.$ui.input.val(newNumber);
            this.$ui.input.trigger('change');
        }

        /**
         * Decreases the input number.
         *
         * @since 1.4.0
         */

    }, {
        key: 'decreaseNumber',
        value: function decreaseNumber() {

            var amount = this.shiftKeyDown ? this.intervals.decrease.alt : this.intervals.decrease.normal;
            var newNumber = this.value - amount;

            this.$ui.input.val(newNumber);
            this.$ui.input.trigger('change');
        }

        /**
         * Fires on the input change. Typically from user typing or other scripts modifying.
         *
         * @since 1.4.0
         */

    }, {
        key: 'inputExternalChange',
        value: function inputExternalChange() {

            this.validateInput();
        }

        /**
         * Runs number through constrains.
         *
         * @param {int} number
         *
         * @return {Object}
         */

    }, {
        key: 'constrainNumber',
        value: function constrainNumber(number) {

            var status = 'unmodified';

            if (this.constraints.max !== false && number > this.constraints.max) {

                status = 'max';
                number = this.constraints.max;
            } else if (this.constraints.min !== false && number < this.constraints.min) {

                status = 'min';
                number = this.constraints.min;
            }

            return {
                status: status,
                number: number
            };
        }

        /**
         * Runs input value through constraints to ensure it is accurate.
         *
         * @since 1.4.0
         */

    }, {
        key: 'validateInput',
        value: function validateInput() {

            var currentValue = this.$ui.input.val();

            // Constrain to numbers
            var matches = currentValue.match(/^-?[0-9]\d*(\.\d+)?$/);
            currentValue = matches && parseInt(matches[0]) || 0;

            var constraints = this.constrainNumber(currentValue);

            switch (constraints.status) {

                case 'max':

                    this.toggleDecreaseDisabledUI(true);
                    this.toggleIncreaseDisabledUI(false);
                    break;

                case 'min':

                    this.toggleIncreaseDisabledUI(true);
                    this.toggleDecreaseDisabledUI(false);
                    break;

                default:

                    this.toggleIncreaseDisabledUI(true);
                    this.toggleDecreaseDisabledUI(true);

            }

            this.value = constraints.number;
            this.$ui.input.val(this.value);

            if (currentValue !== this.value) {

                this.$ui.input.trigger('change');
            }
        }

        /**
         * Disables/Enables the increase button.
         *
         * @since 1.4.0
         *
         * @param {bool} enable True to set to enabled, false to set to disabled
         */

    }, {
        key: 'toggleIncreaseDisabledUI',
        value: function toggleIncreaseDisabledUI(enable) {

            this.$ui.increase.prop('disabled', !enable);
        }

        /**
         * Disables/Enables the decrease button.
         *
         * @since 1.4.0
         *
         * @param {bool} enable True to set to enabled, false to set to disabled
         */

    }, {
        key: 'toggleDecreaseDisabledUI',
        value: function toggleDecreaseDisabledUI(enable) {

            this.$ui.decrease.prop('disabled', !enable);
        }
    }]);

    return FieldNumber;
}(_field2.default);

/**
 * Finds and initializes all Number fields.
 *
 * @since 1.4.0
 */


var FieldNumberInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldNumberInitialize($root) {
        _classCallCheck(this, FieldNumberInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-number]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldNumberInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldNumber($field)
            });
        }
    }]);

    return FieldNumberInitialize;
}();

exports.default = FieldNumberInitialize;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Color Picker Field functionality.
 *
 * @since 1.4.0
 */
var FieldColorPicker = function (_Field) {
    _inherits(FieldColorPicker, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldColorPicker($field) {
        _classCallCheck(this, FieldColorPicker);

        var _this = _possibleConstructorReturn(this, (FieldColorPicker.__proto__ || Object.getPrototypeOf(FieldColorPicker)).call(this, $field, 'colorpicker'));

        _this.initializeColorpicker();
        return _this;
    }

    /**
     * Initializes the Color Picker.
     *
     * @since 1.4.0
     */


    _createClass(FieldColorPicker, [{
        key: 'initializeColorpicker',
        value: function initializeColorpicker() {

            this.$field.wpColorPicker();
        }

        /**
         * Cleans up after a repeater add/init.
         *
         * @since 1.4.0
         */

    }, {
        key: 'fieldCleanup',
        value: function fieldCleanup() {

            this.$wrapper.find('[data-fieldhelpers-field-colorpicker]').appendTo(this.$wrapper.find('.fieldhelpers-field-content'));

            this.$wrapper.find('.wp-picker-container').remove();
        }
    }]);

    return FieldColorPicker;
}(_field2.default);

/**
 * Finds and initializes all Color Picker fields.
 *
 * @since 1.4.0
 */


var FieldColorPickerInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldColorPickerInitialize($root) {
        _classCallCheck(this, FieldColorPickerInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-colorpicker]');

        if ($fields.length) {

            if (!jQuery.isFunction(jQuery.fn.wpColorPicker)) {

                console.error('Field Helpers Error: Trying to initialize Color Picker field but "wp-color-picker" is ' + 'not enqueued.');
                return;
            }

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldColorPickerInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldColorPicker($field)
            });
        }
    }]);

    return FieldColorPickerInitialize;
}();

exports.default = FieldColorPickerInitialize;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Date Picker Field functionality.
 *
 * Also includes Date/Time Picker and Time Picker.
 *
 * @since 1.4.0
 */
var FieldDatePicker = function (_Field) {
    _inherits(FieldDatePicker, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldDatePicker($field) {
        _classCallCheck(this, FieldDatePicker);

        var _this = _possibleConstructorReturn(this, (FieldDatePicker.__proto__ || Object.getPrototypeOf(FieldDatePicker)).call(this, $field, 'datepicker'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the Date Picker.
     *
     * @since 1.4.0
     */


    _createClass(FieldDatePicker, [{
        key: 'initField',
        value: function initField() {
            var _this2 = this;

            this.$hiddenField = this.$field.next('input[type="hidden"]');

            var option_functions = ['beforeShow', 'beforeShowDay', 'calculateWeek', 'onChangeMonthYear', 'onClose', 'onSelect'];

            // Function support
            jQuery.each(this.options.datepickerOptions, function (name, value) {

                if (option_functions.indexOf(name) !== -1 && !jQuery.isFunction(_this2.options.datepickerOptions[name]) && jQuery.isFunction(window[value])) {

                    _this2.options.datepickerOptions[name] = window[value];
                }
            });

            this.options.datepickerOptions.altField = this.$hiddenField;

            this.$field.datepicker(this.options.datepickerOptions);
        }

        /**
         * Cleans up after a repeater add/init.
         *
         * @since 1.4.0
         */

    }, {
        key: 'fieldCleanup',
        value: function fieldCleanup() {

            this.$field.removeClass('hasDatepicker').removeAttr('id');
        }
    }]);

    return FieldDatePicker;
}(_field2.default);

/**
 * Finds and initializes all Date Picker fields.
 *
 * @since 1.4.0
 */


var FieldDatePickerInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldDatePickerInitialize($root) {
        _classCallCheck(this, FieldDatePickerInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-datepicker]');

        if ($fields.length) {

            if (!jQuery.isFunction(jQuery.fn.datepicker)) {

                console.error('Field Helpers Error: Trying to initialize Date Picker field but "jquery-ui-datepicker" ' + 'is not enqueued.');
                return;
            }

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldDatePickerInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldDatePicker($field)
            });
        }
    }]);

    return FieldDatePickerInitialize;
}();

exports.default = FieldDatePickerInitialize;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Time Picker Field functionality.
 *
 * Also includes Date/Time Picker and Time Picker.
 *
 * @since 1.4.0
 */
var FieldTimePicker = function (_Field) {
    _inherits(FieldTimePicker, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldTimePicker($field) {
        _classCallCheck(this, FieldTimePicker);

        var _this = _possibleConstructorReturn(this, (FieldTimePicker.__proto__ || Object.getPrototypeOf(FieldTimePicker)).call(this, $field, 'timepicker'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the Time Picker.
     *
     * @since 1.4.0
     */


    _createClass(FieldTimePicker, [{
        key: 'initField',
        value: function initField() {
            var _this2 = this;

            this.$hiddenField = this.$field.next('input[type="hidden"]');

            var option_functions = ['beforeShow', 'beforeShowDay', 'calculateWeek', 'onChangeMonthYear', 'onClose', 'onSelect'];
            var options = {};

            if (RBM_FieldHelpers['datepicker_args_' + name]) {

                options = RBM_FieldHelpers['datepicker_args_' + name];
            }

            // Function support
            jQuery.each(this.options.timepickerOptions, function (name, value) {

                if (option_functions.indexOf(name) !== -1 && !jQuery.isFunction(_this2.options.timepickerOptions[name]) && jQuery.isFunction(window[value])) {

                    _this2.options.timepickerOptions[name] = window[value];
                }
            });

            options.altField = this.$hiddenField;

            this.$field.timepicker(this.options.timepickerOptions);
        }

        /**
         * Cleans up after a repeater add/init.
         *
         * @since 1.4.0
         */

    }, {
        key: 'fieldCleanup',
        value: function fieldCleanup() {

            this.$field.removeClass('hasDatepicker').removeAttr('id');
        }
    }]);

    return FieldTimePicker;
}(_field2.default);

/**
 * Finds and initializes all Time Picker fields.
 *
 * @since 1.4.0
 */


var FieldTimePickerInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldTimePickerInitialize($root) {
        _classCallCheck(this, FieldTimePickerInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-timepicker]');

        if ($fields.length) {

            if (!jQuery.isFunction(jQuery.fn.timepicker)) {

                console.error('Field Helpers Error: Trying to initialize Time Picker field but ' + '"jquery-ui-datetimepicker" is not enqueued.');
                return;
            }

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldTimePickerInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldTimePicker($field)
            });
        }
    }]);

    return FieldTimePickerInitialize;
}();

exports.default = FieldTimePickerInitialize;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Date Time Picker Field functionality.
 *
 * Also includes Date/Time Picker and Time Picker.
 *
 * @since 1.4.0
 */
var FieldDateTimePicker = function (_Field) {
    _inherits(FieldDateTimePicker, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldDateTimePicker($field) {
        _classCallCheck(this, FieldDateTimePicker);

        var _this = _possibleConstructorReturn(this, (FieldDateTimePicker.__proto__ || Object.getPrototypeOf(FieldDateTimePicker)).call(this, $field, 'datetimepicker'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the Date Time Picker.
     *
     * @since 1.4.0
     */


    _createClass(FieldDateTimePicker, [{
        key: 'initField',
        value: function initField() {
            var _this2 = this;

            this.$hiddenField = this.$field.next('input[type="hidden"]');

            var option_functions = ['beforeShow', 'beforeShowDay', 'calculateWeek', 'onChangeMonthYear', 'onClose', 'onSelect'];

            // Function support
            jQuery.each(this.options.datetimepickerOptions, function (name, value) {

                if (option_functions.indexOf(name) !== -1 && !jQuery.isFunction(_this2.options.datetimepickerOptions[name]) && jQuery.isFunction(window[value])) {

                    _this2.options.datetimepickerOptions[name] = window[value];
                }
            });

            this.options.datetimepickerOptions.altField = this.$hiddenField;

            this.$field.datetimepicker(this.options.datetimepickerOptions);
        }

        /**
         * Cleans up after a repeater add/init.
         *
         * @since 1.4.0
         */

    }, {
        key: 'fieldCleanup',
        value: function fieldCleanup() {

            this.$field.removeClass('hasDatepicker').removeAttr('id');
        }
    }]);

    return FieldDateTimePicker;
}(_field2.default);

/**
 * Finds and initializes all Date Time Picker fields.
 *
 * @since 1.4.0
 */


var FieldDateTimePickerInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldDateTimePickerInitialize($root) {
        _classCallCheck(this, FieldDateTimePickerInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-datetimepicker]');

        if ($fields.length) {

            if (!jQuery.isFunction(jQuery.fn.datetimepicker)) {

                console.error('Field Helpers Error: Trying to initialize Date Time Picker field but ' + '"rbm-fh-jquery-ui-datetimepicker" is not enqueued.');
                return;
            }

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldDateTimePickerInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldDateTimePicker($field)
            });
        }
    }]);

    return FieldDateTimePickerInitialize;
}();

exports.default = FieldDateTimePickerInitialize;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Table Field functionality.
 *
 * @since 1.4.0
 */
var FieldTable = function (_Field) {
    _inherits(FieldTable, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldTable($field) {
        _classCallCheck(this, FieldTable);

        var _this = _possibleConstructorReturn(this, (FieldTable.__proto__ || Object.getPrototypeOf(FieldTable)).call(this, $field, 'table'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the Table field.
     *
     * @since 1.4.0
     */


    _createClass(FieldTable, [{
        key: 'initField',
        value: function initField() {

            this.$ui = {
                actions: this.$field.find('.fieldhelpers-field-table-actions'),
                loading: this.$field.find('.fieldhelpers-field-table-loading'),
                table: this.$field.find('table'),
                thead: this.$field.find('thead'),
                tbody: this.$field.find('tbody'),
                addRow: this.$field.find('[data-table-create-row]'),
                addColumn: this.$field.find('[data-table-create-column]')
            };

            this.l10n = RBM_FieldHelpers.l10n['field_table'] || {};

            this.name = this.$field.attr('data-table-name');

            var data = JSON.parse(this.$ui.table.attr('data-table-data'));

            this.data = {};
            this.data.head = data.head || [];
            this.data.body = data.body || [];

            this.setupHandlers();

            // Initial build
            this.buildTable();

            // Show initially
            this.$ui.table.show();
            this.$ui.actions.show();
            this.$ui.loading.hide();
        }

        /**
         * Sets up the class handlers.
         *
         * @since 1.4.0
         */

    }, {
        key: 'setupHandlers',
        value: function setupHandlers() {
            var _this2 = this;

            var api = this;

            this.$ui.addRow.click(function (e) {

                e.preventDefault();
                _this2.addRow();
            });

            this.$ui.addColumn.click(function (e) {

                e.preventDefault();
                _this2.addColumn();
            });

            this.$ui.table.on('click', '[data-delete-row]', function (e) {

                var index = jQuery(this).closest('tr').index();

                api.deleteRow(index);
            });

            this.$ui.table.on('click', '[data-delete-column]', function (e) {

                var index = jQuery(this).closest('td').index();

                api.deleteColumn(index);
            });

            this.$ui.table.on('change', 'input[type="text"]', function (e) {

                _this2.updateTableData();
            });
        }

        /**
         * Gathers all data from the table.
         */

    }, {
        key: 'updateTableData',
        value: function updateTableData() {

            var api = this;

            // Head
            var $headCells = this.$ui.table.find('thead th');
            var dataHead = [];
            var currentCell = 0;

            $headCells.each(function () {

                var $input = jQuery(this).find('input[name="' + api.name + '[head][' + currentCell + ']"]');

                if (!$input.length) {

                    console.error('Field Helpers Error: Table head data corrupted.');
                    return false;
                }

                dataHead.push($input.val());

                currentCell++;
            });

            this.data.head = dataHead;

            // Body
            var $bodyRows = this.$ui.table.find('tbody tr');
            var dataBody = [];
            var currentRow = 0;

            $bodyRows.each(function () {

                // Skip delete row
                if (jQuery(this).hasClass('fieldhelpers-field-table-delete-columns')) {

                    return true;
                }

                var rowData = [];
                var $cells = jQuery(this).find('td');
                var currentCell = 0;

                $cells.each(function () {

                    // Skip delete cell
                    if (jQuery(this).hasClass('fieldhelpers-field-table-delete-row')) {

                        return true;
                    }

                    var $input = jQuery(this).find('input[name="' + api.name + '[body][' + currentRow + '][' + currentCell + ']"]');

                    if (!$input.length) {

                        console.error('Field Helpers Error: Table body data corrupted.');
                        return false;
                    }

                    rowData.push($input.val());

                    currentCell++;
                });

                dataBody.push(rowData);

                currentRow++;
            });

            this.data.body = dataBody;
        }

        /**
         * Adds a row to the table.
         *
         * @since 1.4.0
         */

    }, {
        key: 'addRow',
        value: function addRow() {

            if (!this.data.head.length) {

                this.data.head.push('');
            }

            if (!this.data.body.length) {

                // Push 1 empty row with 1 empty cell
                this.data.body.push(['']);
            } else {

                var columns = this.data.body[0].length;
                var row = [];

                for (var i = 0; i < columns; i++) {
                    row.push('');
                }

                this.data.body.push(row);
            }

            this.buildTable();
        }

        /**
         * Adds a column to the table.
         *
         * @since 1.4.0
         */

    }, {
        key: 'addColumn',
        value: function addColumn() {

            if (!this.data.body.length) {

                // Push 1 empty row with 1 empty cell
                this.data.head.push(['']);
                this.data.body.push(['']);
            } else {

                this.data.head.push('');

                this.data.body.map(function (row) {
                    row.push('');
                });
            }

            this.buildTable();
        }

        /**
         * Deletes a row from the table.
         *
         * @since 1.4.0
         *
         * @param {int} index Index of row to delete.
         */

    }, {
        key: 'deleteRow',
        value: function deleteRow(index) {

            // Decrease to compensate for "delete row" at top
            index--;

            if (this.data.body.length === 1) {

                this.data.head = [];
                this.data.body = [];
            } else {

                this.data.body.splice(index, 1);
            }

            this.buildTable();
        }

        /**
         * Deletes a column from the table.
         *
         * @since 1.4.0
         *
         * @param {int} index Index of column to delete.
         */

    }, {
        key: 'deleteColumn',
        value: function deleteColumn(index) {

            if (this.data.body[0].length === 1) {

                this.data.head = [];
                this.data.body = [];
            } else {

                this.data.head.splice(index, 1);

                this.data.body.map(function (row) {
                    return row.splice(index, 1);
                });
            }

            this.buildTable();
        }

        /**
         * Builds the table based on the table data.
         *
         * @since 1.4.0
         */

    }, {
        key: 'buildTable',
        value: function buildTable() {
            var _this3 = this;

            this.$ui.thead.html('');
            this.$ui.tbody.html('');

            if (this.data.head.length) {

                var $row = jQuery('<tr />');

                this.data.head.map(function (cell, cell_i) {

                    var $cell = jQuery('<th />');

                    $cell.append('<input type="text" name="' + _this3.name + '[head][' + cell_i + ']" />');
                    $cell.find('input[type="text"]').val(cell);

                    $row.append($cell);
                });

                this.$ui.thead.append($row);
            }

            if (this.data.body.length) {

                var $deleteRow = jQuery('<tr class="fieldhelpers-field-table-delete-columns"></tr>');

                for (var i = 0; i < this.data.body[0].length; i++) {

                    $deleteRow.append('<td>' + ('<button type="button" data-delete-column aria-label="' + this.l10n['delete_column'] + '">') + '<span class="dashicons dashicons-no" />' + '</button>' + '</td>');
                }

                this.$ui.tbody.append($deleteRow);

                this.data.body.map(function (row, row_i) {

                    var $row = jQuery('<tr/>');

                    row.map(function (cell, cell_i) {

                        var $cell = jQuery('<td/>');

                        $cell.append('<input type="text" name="' + _this3.name + '[body][' + row_i + '][' + cell_i + ']" />');
                        $cell.find('input[type="text"]').val(cell);

                        $row.append($cell);
                    });

                    $row.append('<td class="fieldhelpers-field-table-delete-row">' + ('<button type="button" data-delete-row aria-label="' + _this3.l10n['delete_row'] + '">') + '<span class="dashicons dashicons-no" />' + '</button>' + '</td>');

                    _this3.$ui.tbody.append($row);
                });
            }
        }
    }]);

    return FieldTable;
}(_field2.default);

/**
 * Finds and initializes all Table fields.
 *
 * @since 1.4.0
 */


var FieldTableInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldTableInitialize($root) {
        _classCallCheck(this, FieldTableInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-table]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldTableInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldTable($field)
            });
        }
    }]);

    return FieldTableInitialize;
}();

exports.default = FieldTableInitialize;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Media Field functionality.
 *
 * @since 1.4.0
 */
var FieldMedia = function (_Field) {
    _inherits(FieldMedia, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldMedia($field) {
        _classCallCheck(this, FieldMedia);

        var _this = _possibleConstructorReturn(this, (FieldMedia.__proto__ || Object.getPrototypeOf(FieldMedia)).call(this, $field, 'media'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the Media field.
     *
     * @since 1.4.0
     */


    _createClass(FieldMedia, [{
        key: 'initField',
        value: function initField() {

            this.$ui = {
                input: this.$field.find('[data-media-input]'),
                addButton: this.$field.find('[data-add-media]'),
                imagePreview: this.$field.find('[data-image-preview]'),
                mediaPreview: this.$field.find('[data-media-preview]'),
                removeButton: this.$field.find('[data-remove-media]')
            };

            this.mediaFrame = wp.media.frames.meta_image_frame = wp.media({
                title: this.options.l10n['window_title']
            });

            this.placeholder = this.options.placeholder;
            this.type = this.options.type;

            this.imageProperties = {
                previewSize: this.options.previewSize
            };

            this.setupHandlers();
        }

        /**
         * Sets up the class handlers.
         *
         * @since 1.4.0
         */

    }, {
        key: 'setupHandlers',
        value: function setupHandlers() {
            var _this2 = this;

            this.$ui.addButton.click(function (e) {

                e.preventDefault();
                _this2.addMedia();
            });

            this.$ui.removeButton.click(function (e) {

                e.preventDefault();
                _this2.removeMedia();
            });

            this.mediaFrame.on('select', function (e) {

                _this2.selectMedia();
            });
        }

        /**
         * Opens the media frame to add media.
         *
         * @since 1.4.0
         */

    }, {
        key: 'addMedia',
        value: function addMedia() {

            this.mediaFrame.open();
        }

        /**
         * Removes the currently selected media.
         *
         * @since 1.4.0
         */

    }, {
        key: 'removeMedia',
        value: function removeMedia() {

            this.$ui.addButton.show();
            this.$ui.removeButton.hide();
            this.$ui.input.val('');

            // Reset preview
            switch (this.type) {

                case 'image':

                    this.$ui.imagePreview.attr('src', this.placeholder || '');

                    break;

                default:

                    this.$ui.mediaPreview.html(this.placeholder || '&nbsp;');
            }
        }

        /**
         * Fires on selecting a piece of media.
         *
         * @since 1.4.0
         */

    }, {
        key: 'selectMedia',
        value: function selectMedia() {

            var mediaAttachment = this.mediaFrame.state().get('selection').first().toJSON();

            this.$ui.input.val(mediaAttachment.id);

            this.$ui.addButton.hide();
            this.$ui.removeButton.show();

            // Preview
            switch (this.type) {

                case 'image':

                    var previewUrl = mediaAttachment.url;

                    if (mediaAttachment.sizes[this.imageProperties.previewSize]) {

                        previewUrl = mediaAttachment.sizes[this.imageProperties.previewSize].url;
                    }

                    this.$ui.imagePreview.attr('src', previewUrl);
                    break;

                default:

                    this.$ui.mediaPreview.html(mediaAttachment.url);
            }
        }
    }]);

    return FieldMedia;
}(_field2.default);

/**
 * Finds and initializes all Media fields.
 *
 * @since 1.4.0
 */


var FieldMediaInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldMediaInitialize($root) {
        _classCallCheck(this, FieldMediaInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-media]');

        if ($fields.length) {

            if (!wp.media) {

                console.error('Field Helpers Error: Trying to initialize Media field but media is not enqueued.');
                return;
            }

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldMediaInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldMedia($field)
            });
        }
    }]);

    return FieldMediaInitialize;
}();

exports.default = FieldMediaInitialize;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * List Field functionality.
 *
 * @since 1.4.0
 */
var FieldList = function (_Field) {
    _inherits(FieldList, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldList($field) {
        _classCallCheck(this, FieldList);

        var _this = _possibleConstructorReturn(this, (FieldList.__proto__ || Object.getPrototypeOf(FieldList)).call(this, $field, 'list'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the list.
     *
     * @since 1.4.0
     */


    _createClass(FieldList, [{
        key: 'initField',
        value: function initField() {

            this.$field.sortable(this.options);
        }
    }]);

    return FieldList;
}(_field2.default);

/**
 * Finds and initializes all List fields.
 *
 * @since 1.4.0
 */


var FieldListInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldListInitialize($root) {
        _classCallCheck(this, FieldListInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-list]');

        if ($fields.length) {

            if (!jQuery.isFunction(jQuery.fn.sortable)) {

                console.error('Field Helpers Error: Trying to initialize List field but "jquery-ui-sortable" ' + 'is not enqueued.');
                return;
            }

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldListInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldList($field)
            });
        }
    }]);

    return FieldListInitialize;
}();

exports.default = FieldListInitialize;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

var _fieldsInit = __webpack_require__(1);

var _fieldsInit2 = _interopRequireDefault(_fieldsInit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Repeater Field functionality.
 *
 * @since 1.4.0
 */
var FieldRepeater = function (_Field) {
    _inherits(FieldRepeater, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldRepeater($field) {
        _classCallCheck(this, FieldRepeater);

        var _this = _possibleConstructorReturn(this, (FieldRepeater.__proto__ || Object.getPrototypeOf(FieldRepeater)).call(this, $field, 'repeater'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the Repeater.
     *
     * @since 1.4.0
     */


    _createClass(FieldRepeater, [{
        key: 'initField',
        value: function initField() {
            var _this2 = this;

            this.$repeaterList = this.$field.find('.fieldhelpers-field-repeater-list');

            var api = this;

            this.repeater = this.$field.repeater({
                show: function show() {
                    api.repeaterShow(jQuery(this));
                },
                hide: function hide(deleteItem) {
                    api.repeaterHide(jQuery(this), deleteItem);
                },
                ready: function ready(setIndexes) {
                    api.$repeaterList.on('sortupdate', setIndexes);
                },
                isFirstItemUndeletable: api.options.isFirstItemUndeletable
            });

            // Delete first item if allowed and empty
            if (!this.options.isFirstItemUndeletable && this.options.empty) {

                this.$repeaterList.find('.fieldhelpers-field-repeater-row').remove();
            }

            if (this.options.collapsable) {

                this.initCollapsable();
            }

            if (this.options.sortable) {

                if (!jQuery.isFunction(jQuery.fn.sortable)) {

                    console.error('Field Helpers Error: Trying to initialize sortable Repeater field but "jquery-ui-sortable" ' + 'is not enqueued.');
                    return;
                } else {

                    this.initSortable();
                }
            }

            // Delay for other plugins
            setTimeout(function () {
                _this2.$field.trigger('repeater-init', [_this2.$field]);
            }, 1);
        }

        /**
         * Initializes the Collapsable feature, if enabled.
         *
         * @since 1.4.0
         */

    }, {
        key: 'initCollapsable',
        value: function initCollapsable() {

            var api = this;

            this.$field.on('click touchend', '[data-repeater-collapsable-handle]', function () {
                console.log('click');
                api.toggleCollapse(jQuery(this).closest('.fieldhelpers-field-repeater-row'));
            });
        }

        /**
         * Initializes the Sortable feature, if enabled.
         *
         * @since 1.4.0
         */

    }, {
        key: 'initSortable',
        value: function initSortable() {

            var api = this;

            this.$repeaterList.sortable({
                axis: 'y',
                handle: '.fieldhelpers-field-repeater-handle',
                forcePlaceholderSize: true,
                placeholder: 'fieldhelpers-sortable-placeholder',
                stop: function stop(e, ui) {

                    api.$repeaterList.trigger('list-update', [api.$repeaterList]);
                }
            });
        }

        /**
         * Toggles a repeater item collapse.
         *
         * @since 1.4.0
         *
         * @param {jQuery} $item
         */

    }, {
        key: 'toggleCollapse',
        value: function toggleCollapse($item) {

            var $content = $item.find('.fieldhelpers-field-repeater-content').first();
            var status = $item.hasClass('opened') ? 'closing' : 'opening';

            if (status === 'opening') {

                $content.stop().slideDown();
                $item.addClass('opened');
                $item.removeClass('closed');
            } else {

                $content.stop().slideUp();
                $item.addClass('closed');
                $item.removeClass('opened');
            }
        }

        /**
         * Shows a new repeater item.
         *
         * @since 1.4.0
         *
         * @param {jQuery} $item Repeater item row.
         */

    }, {
        key: 'repeaterShow',
        value: function repeaterShow($item) {

            this.$field.trigger('repeater-before-add-item', [$item]);

            $item.slideDown();

            if (this.$repeaterList.hasClass('collapsable')) {

                $item.addClass('opened').removeClass('closed');

                // Hide current title for new item and show default title
                $item.find('.fieldhelpers-field-repeater-header span.collapsable-title').html($item.find('.fieldhelpers-field-repeater-header span.collapsable-title').data('collapsable-title-default'));

                $item.find('.collapse-icon').css({ 'transform': 'rotate(-180deg)' });
            }

            // Re-initialize fields in new row
            new _fieldsInit2.default($item);

            this.$field.trigger('repeater-add-item', [$item]);
        }

        /**
         * Removes a repeater item.
         *
         * @since 1.4.0
         *
         * @param {jQuery} $item Repeater item row.
         * @param {function} deleteItem Callback for deleting the item.
         */

    }, {
        key: 'repeaterHide',
        value: function repeaterHide($item, deleteItem) {
            var _this3 = this;

            if (confirm(this.options.l10n['confirm_delete_text'])) {

                this.$field.trigger('repeater-before-delete-item', [$item]);

                $item.slideUp(400, function () {

                    deleteItem();
                    _this3.$field.trigger('repeater-delete-item', [$item]);
                });
            }
        }
    }]);

    return FieldRepeater;
}(_field2.default);

/**
 * Finds and initializes all Repeater fields.
 *
 * @since 1.4.0
 */


var FieldRepeaterInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldRepeaterInitialize($root) {
        _classCallCheck(this, FieldRepeaterInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-repeater]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldRepeaterInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldRepeater($field)
            });
        }
    }]);

    return FieldRepeaterInitialize;
}();

exports.default = FieldRepeaterInitialize;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Select Field functionality.
 *
 * @since 1.4.0
 */
var FieldSelect = function (_Field) {
    _inherits(FieldSelect, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldSelect($field) {
        _classCallCheck(this, FieldSelect);

        var _this = _possibleConstructorReturn(this, (FieldSelect.__proto__ || Object.getPrototypeOf(FieldSelect)).call(this, $field, 'select'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the select.
     *
     * @since 1.4.0
     */


    _createClass(FieldSelect, [{
        key: 'initField',
        value: function initField() {

            if (!this.options.select2Disabled) {

                if (!jQuery.isFunction(jQuery.fn.select2)) {

                    console.error('Field Helpers Error: Trying to initialize Select field but "select2" ' + 'is not enqueued.');
                    return;
                }

                this.setupSelect2Options();

                this.$field.select2(this.options.select2Options);
            }
        }

        /**
         * Sets up languages.
         *
         * @since 1.4.0
         */

    }, {
        key: 'setupL10n',
        value: function setupL10n() {
            var _this2 = this;

            if (Object.keys(this.options.select2Options.language).length > 0) {

                Object.keys(this.options.select2Options.language).map(function (id) {

                    var text = _this2.options.select2Options.language[id];

                    // All languages must be functions. Turn all into functions.
                    _this2.options.select2Options.language[id] = function (args) {
                        return text;
                    };
                });
            }
        }

        /**
         * Sets up Select2 arguments, allowing for callback arguments.
         *
         * @since 1.4.2
         */

    }, {
        key: 'setupSelect2Options',
        value: function setupSelect2Options() {
            var _this3 = this;

            this.setupL10n();

            // List of available Select2 options that are callbacks
            var callbackOptions = ['escapeMarkup', 'initSelection', 'matcher', 'query', 'sorter', 'templateResult', 'templateSelection', 'tokenizer'];

            Object.keys(this.options.select2Options).map(function (name) {

                if (callbackOptions.indexOf(name) !== -1) {

                    var callbackName = _this3.options.select2Options[name];

                    if (typeof window[callbackName] === 'function') {

                        _this3.options.select2Options[name] = window[callbackName];
                    }
                }
            });

            // Automatically prefix selected items with optgroup label, if using optgroups
            if (this.options.optGroups && this.options.optGroupSelectionPrefix && typeof this.options.select2Options.templateSelection === 'undefined') {

                this.options.select2Options.templateSelection = function (item) {

                    var optGroup = jQuery(item.element).closest('optgroup').attr('label').trim();

                    return optGroup + ': ' + item.text;
                };
            }
        }

        /**
         * Resets the field.
         *
         * @since 1.4.0
         */

    }, {
        key: 'fieldCleanup',
        value: function fieldCleanup() {

            if (this.options.select2Disabled) {

                return;
            }

            var $oldSelect = this.$field.next('.select2');

            if ($oldSelect.length) {

                $oldSelect.remove();
            }

            this.$field.removeClass('select2-hidden-accessible').removeAttr('tablindex aria-hidden');
        }

        /**
         * Sets the field to default. Override in child class if need different method.
         *
         * @since 1.4.0
         */

    }, {
        key: 'setDefault',
        value: function setDefault() {

            this.$field.find('option:selected').prop('selected', false);
            this.$field.trigger('change');
        }
    }]);

    return FieldSelect;
}(_field2.default);

/**
 * Finds and initializes all Select fields.
 *
 * @since 1.4.0
 */


var FieldSelectInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldSelectInitialize($root) {
        _classCallCheck(this, FieldSelectInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-select]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldSelectInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldSelect($field)
            });
        }
    }]);

    return FieldSelectInitialize;
}();

exports.default = FieldSelectInitialize;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * TextArea Field functionality.
 *
 * @since 1.4.0
 */
var FieldTextArea = function (_Field) {
    _inherits(FieldTextArea, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldTextArea($field) {
        _classCallCheck(this, FieldTextArea);

        var _this = _possibleConstructorReturn(this, (FieldTextArea.__proto__ || Object.getPrototypeOf(FieldTextArea)).call(this, $field, 'textarea'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the WYSIWYG.
     *
     * @since 1.4.0
     */


    _createClass(FieldTextArea, [{
        key: 'initField',
        value: function initField() {

            if (this.options.wysiwyg) {

                if (!wp.editor) {

                    console.error('Field Helpers Error: Trying to initialize a WYSIWYG Text Area field but "wp_editor" ' + 'is not enqueued.');
                    return;
                }

                var settings = jQuery.extend(this.getDefaultEditorSettings(), this.options.wysiwygOptions);

                console.log(settings);
                wp.editor.initialize(this.$field.attr('id'), settings);
            }
        }

        /**
         * Resets the field.
         *
         * @since 1.4.0
         */

    }, {
        key: 'fieldCleanup',
        value: function fieldCleanup() {

            if (this.options.wysiwyg) {

                var id = this.$field.attr('id');

                if (window.tinymce.get(id)) {

                    wp.editor.remove(id);
                } else {

                    this.$field.appendTo(this.$wrapper.find('.fieldhelpers-field-content'));
                    this.$wrapper.find('.wp-editor-wrap').remove();
                }
            }
        }

        /**
         * Fires before deleting the item from a repeater.
         *
         * Removes from wp.editor.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterBeforeDeleteSelf',
        value: function repeaterBeforeDeleteSelf() {

            this.fieldCleanup();
        }

        /**
         * Fires on Repeat delete item.
         *
         * Adds slight delay to field re-initialization.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterOnDeleteItem',
        value: function repeaterOnDeleteItem() {
            var _this2 = this;

            this.fieldCleanup();
            this.repeaterSetID();

            // Add slight delay because all repeater item WYSIWYG's must be unitialized before re-initializing to prevent
            // ID overlap.
            setTimeout(function () {
                _this2.initField();
            }, 1);
        }

        /**
         * Fires on Repeat sort item.
         *
         * Adds slight delay to field re-initialization.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterOnSort',
        value: function repeaterOnSort() {
            var _this3 = this;

            this.fieldCleanup();
            this.repeaterSetID();

            // Add slight delay because all repeater item WYSIWYG's must be unitialized before re-initializing to prevent
            // ID overlap.
            setTimeout(function () {
                _this3.initField();
            }, 1);
        }

        /**
         * Tries to get default editor settings.
         *
         * @since 1.4.0
         *
         * @return {{}}
         */

    }, {
        key: 'getDefaultEditorSettings',
        value: function getDefaultEditorSettings() {

            if (!jQuery.isFunction(wp.editor.getDefaultSettings)) {

                return {};
            } else {

                return wp.editor.getDefaultSettings();
            }
        }
    }]);

    return FieldTextArea;
}(_field2.default);

/**
 * Finds and initializes all TextArea fields.
 *
 * @since 1.4.0
 */


var FieldTextAreaInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldTextAreaInitialize($root) {
        _classCallCheck(this, FieldTextAreaInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-textarea]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldTextAreaInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldTextArea($field)
            });
        }
    }]);

    return FieldTextAreaInitialize;
}();

exports.default = FieldTextAreaInitialize;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Checkbox Field functionality.
 *
 * @since 1.4.0
 */
var FieldCheckbox = function (_Field) {
    _inherits(FieldCheckbox, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldCheckbox($field) {
        _classCallCheck(this, FieldCheckbox);

        var _this = _possibleConstructorReturn(this, (FieldCheckbox.__proto__ || Object.getPrototypeOf(FieldCheckbox)).call(this, $field, 'checkbox'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the select.
     *
     * @since 1.4.0
     */


    _createClass(FieldCheckbox, [{
        key: 'initField',
        value: function initField() {

            this.$ui = {
                checkboxes: this.$field.find('input[type="checkbox"]')
            };

            this.setupHandlers();

            this.$field.find('input:checked').change();
        }

        /**
         * Sets up class handlers.
         *
         * @since 1.4.0
         */

    }, {
        key: 'setupHandlers',
        value: function setupHandlers() {

            var api = this;

            this.$ui.checkboxes.change(function () {
                api.handleChange(jQuery(this));
            });
        }

        /**
         * Fires on checkbox change.
         *
         * @since 1.4.0
         *
         * @param {jQuery} $input Checkbox input.
         */

    }, {
        key: 'handleChange',
        value: function handleChange($input) {

            if ($input.prop('checked')) {

                this.setActive($input.closest('.fieldhelpers-field-checkbox-row'));
            } else {

                this.setInactive($input.closest('.fieldhelpers-field-checkbox-row'));
            }
        }

        /**
         * Sets the checkbox row as active.
         *
         * @since 1.4.0
         *
         * @param {jQuery} $row
         */

    }, {
        key: 'setActive',
        value: function setActive($row) {

            $row.addClass('fieldhelpers-field-checkbox-row-active');
        }

        /**
         * Sets the checkbox row as inactive.
         *
         * @since 1.4.0
         *
         * @param {jQuery} $row
         */

    }, {
        key: 'setInactive',
        value: function setInactive($row) {

            $row.removeClass('fieldhelpers-field-checkbox-row-active');
        }

        /**
         * Sets the ID to be unique, based off the repeater item index.
         *
         * For checkboxes, there will be multiple IDs in each, and need to be set accordingly.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterSetID',
        value: function repeaterSetID() {

            var ID = this.options.id;
            var $rows = this.$field.find('.fieldhelpers-field-checkbox-row');
            var index = this.$field.closest('[data-repeater-item]').index();

            $rows.each(function () {

                var $field = jQuery(this).find('input[type="checkbox"]');
                var $label = $field.next('label');
                var fieldIndex = jQuery(this).index();
                var newID = ID + '_' + index + '_' + fieldIndex;

                $field.attr('id', newID);
                $label.attr('for', newID);
            });
        }

        /**
         * Sets the field to default.
         *
         * @since 1.4.0
         */

    }, {
        key: 'setDefault',
        value: function setDefault() {

            if (this.options.default) {

                this.$field.find('[value="' + this.options.default + '"]').prop('checked', true).change();
            }
        }
    }]);

    return FieldCheckbox;
}(_field2.default);

/**
 * Finds and initializes all Checkbox fields.
 *
 * @since 1.4.0
 */


var FieldCheckboxInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldCheckboxInitialize($root) {
        _classCallCheck(this, FieldCheckboxInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-checkbox]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldCheckboxInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldCheckbox($field)
            });
        }
    }]);

    return FieldCheckboxInitialize;
}();

exports.default = FieldCheckboxInitialize;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Radio Field functionality.
 *
 * @since 1.4.0
 */
var FieldRadio = function (_Field) {
    _inherits(FieldRadio, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldRadio($field) {
        _classCallCheck(this, FieldRadio);

        var _this = _possibleConstructorReturn(this, (FieldRadio.__proto__ || Object.getPrototypeOf(FieldRadio)).call(this, $field, 'radio'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the select.
     *
     * @since 1.4.0
     */


    _createClass(FieldRadio, [{
        key: 'initField',
        value: function initField() {

            this.$ui = {
                radios: this.$field.find('input[type="radio"]')
            };

            this.setupHandlers();

            this.$field.find('input:checked').change();
        }

        /**
         * Sets up class handlers.
         *
         * @since 1.4.0
         */

    }, {
        key: 'setupHandlers',
        value: function setupHandlers() {

            var api = this;

            this.$ui.radios.change(function () {
                api.handleChange(jQuery(this));
            });
        }

        /**
         * Fires on radio change.
         *
         * @since 1.4.0
         *
         * @param {jQuery} $input Checkbox input.
         */

    }, {
        key: 'handleChange',
        value: function handleChange($input) {

            this.setInactive(this.$ui.radios.closest('.fieldhelpers-field-radio-row'));
            this.setActive($input.closest('.fieldhelpers-field-radio-row'));
        }

        /**
         * Sets the radio row as active.
         *
         * @since 1.4.0
         *
         * @param {jQuery} $row
         */

    }, {
        key: 'setActive',
        value: function setActive($row) {

            $row.addClass('fieldhelpers-field-radio-row-active');
        }

        /**
         * Sets the radio row as inactive.
         *
         * @since 1.4.0
         *
         * @param {jQuery} $row
         */

    }, {
        key: 'setInactive',
        value: function setInactive($row) {

            $row.removeClass('fieldhelpers-field-radio-row-active');
        }

        /**
         * Sets the ID to be unique, based off the repeater item index.
         *
         * For radios, there will be multiple IDs in each, and need to be set accordingly.
         *
         * @since 1.4.0
         */

    }, {
        key: 'repeaterSetID',
        value: function repeaterSetID() {

            var ID = this.options.id;
            var $rows = this.$field.find('.fieldhelpers-field-radio-row');
            var index = this.$field.closest('[data-repeater-item]').index();

            $rows.each(function () {

                var $field = jQuery(this).find('input[type="radio"]');
                var $label = $field.next('label');
                var fieldIndex = jQuery(this).index();
                var newID = ID + '_' + index + '_' + fieldIndex;

                $field.attr('id', newID);
                $label.attr('for', newID);
            });
        }

        /**
         * Sets the field to default.
         *
         * @since 1.4.0
         */

    }, {
        key: 'setDefault',
        value: function setDefault() {

            if (this.options.default) {

                this.$field.find('[value="' + this.options.default + '"]').prop('checked', true).change();
            }
        }
    }]);

    return FieldRadio;
}(_field2.default);

/**
 * Finds and initializes all Radio fields.
 *
 * @since 1.4.0
 */


var FieldRadioInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldRadioInitialize($root) {
        _classCallCheck(this, FieldRadioInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-radio]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldRadioInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldRadio($field)
            });
        }
    }]);

    return FieldRadioInitialize;
}();

exports.default = FieldRadioInitialize;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _field = __webpack_require__(0);

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Toggle Field functionality.
 *
 * @since 1.4.0
 */
var FieldToggle = function (_Field) {
    _inherits(FieldToggle, _Field);

    /**
     * Class constructor.
     *
     * @since 1.4.0
     */
    function FieldToggle($field) {
        _classCallCheck(this, FieldToggle);

        var _this = _possibleConstructorReturn(this, (FieldToggle.__proto__ || Object.getPrototypeOf(FieldToggle)).call(this, $field, 'toggle'));

        _this.initField();
        return _this;
    }

    /**
     * Initializes the select.
     *
     * @since 1.4.0
     */


    _createClass(FieldToggle, [{
        key: 'initField',
        value: function initField() {
            var _this2 = this;

            this.getUI();

            // Initial change trigger to help other plugins
            setTimeout(function () {
                _this2.$field.trigger('change', [_this2.$ui.input.val()]);
            }, 1);

            this.setupHandlers();
        }

        /**
         * Retrieves the UI.
         *
         * @since 1.4.0
         */

    }, {
        key: 'getUI',
        value: function getUI() {

            this.$ui = {
                slider: this.$field.find('.fieldhelpers-field-toggle-slider'),
                input: this.$field.find('input[type="hidden"]')
            };
        }

        /**
         * Sets up class handlers.
         *
         * @since 1.4.0
         */

    }, {
        key: 'setupHandlers',
        value: function setupHandlers() {

            var api = this;

            this.$ui.slider.click(function () {
                api.handleClick();
            });
        }

        /**
         * Return if field is checked or not.
         *
         * @since 1.4.0
         *
         * @returns {*}
         */

    }, {
        key: 'isChecked',
        value: function isChecked() {

            return this.$field.hasClass('checked');
        }

        /**
         * Fires on toggle change.
         *
         * @since 1.4.0
         */

    }, {
        key: 'handleClick',
        value: function handleClick() {

            if (this.isChecked()) {

                this.$ui.input.val(this.options.uncheckedValue);
                this.$field.removeClass('checked');
            } else {

                this.$ui.input.val(this.options.checkedValue);
                this.$field.addClass('checked');
            }

            this.$field.trigger('change', [this.$ui.input.val()]);
        }
    }]);

    return FieldToggle;
}(_field2.default);

/**
 * Finds and initializes all Toggle fields.
 *
 * @since 1.4.0
 */


var FieldToggleInitialize = function () {

    /**
     * Class constructor.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $root Root element to initialize fields inside.
     */
    function FieldToggleInitialize($root) {
        _classCallCheck(this, FieldToggleInitialize);

        var api = this;

        this.fields = [];

        var $fields = $root.find('[data-fieldhelpers-field-toggle]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since 1.4.0
     *
     * @param {jQuery} $field
     */


    _createClass(FieldToggleInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldToggle($field)
            });
        }
    }]);

    return FieldToggleInitialize;
}();

exports.default = FieldToggleInitialize;

/***/ })
/******/ ]);