/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _fieldsInit = __webpack_require__(2);

var _fieldsInit2 = _interopRequireDefault(_fieldsInit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Initialize app on jQuery Ready.
jQuery(function () {

    var Fields = new _fieldsInit2.default();
});

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fieldNumber = __webpack_require__(3);

var _fieldNumber2 = _interopRequireDefault(_fieldNumber);

var _fieldColorpicker = __webpack_require__(4);

var _fieldColorpicker2 = _interopRequireDefault(_fieldColorpicker);

var _fieldDatepicker = __webpack_require__(5);

var _fieldDatepicker2 = _interopRequireDefault(_fieldDatepicker);

var _fieldTable = __webpack_require__(6);

var _fieldTable2 = _interopRequireDefault(_fieldTable);

var _fieldMedia = __webpack_require__(7);

var _fieldMedia2 = _interopRequireDefault(_fieldMedia);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Handles all field initializations.
 *
 * @since {{VERSION}}
 */
var FieldsInitialize =

/**
 * Class constructor.
 *
 * @since {{VERSION}}
 */
function FieldsInitialize() {
  _classCallCheck(this, FieldsInitialize);

  this.fields = {};

  this.fields.number = new _fieldNumber2.default();
  this.fields.colorpicker = new _fieldColorpicker2.default();
  this.fields.datepicker = new _fieldDatepicker2.default();
  this.fields.table = new _fieldTable2.default();
  this.fields.media = new _fieldMedia2.default();
};

exports.default = FieldsInitialize;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Number Field functionality.
 *
 * @since {{VERSION}}
 */
var FieldNumber = function () {

    /**
     * Class constructor.
     *
     * @since {{VERSION}}
     */
    function FieldNumber($field) {
        _classCallCheck(this, FieldNumber);

        this.$ui = {
            container: $field,
            input: $field.find('.fieldhelpers-field-input'),
            increase: $field.find('[data-number-increase]'),
            decrease: $field.find('[data-number-decrease]')
        };

        this.intervals = {
            increase: {
                normal: parseInt(this.$ui.increase.attr('data-number-interval')),
                alt: parseInt(this.$ui.increase.attr('data-number-alt-interval'))
            },
            decrease: {
                normal: parseInt(this.$ui.decrease.attr('data-number-interval')),
                alt: parseInt(this.$ui.decrease.attr('data-number-alt-interval'))
            }
        };

        var constrainMax = this.$ui.increase.attr('data-number-max');
        var constrainMin = this.$ui.decrease.attr('data-number-min');

        this.constraints = {
            max: constrainMax !== 'none' ? parseInt(constrainMax) : false,
            min: constrainMin !== 'none' ? parseInt(constrainMin) : false
        };

        this.shiftKeyUtility();
        this.setupHandlers();

        var initialValue = this.$ui.input.val();
        this.value = !initialValue ? 0 : parseInt(initialValue);

        // Initializes the field
        this.validateInput();
    }

    /**
     * Helps determine shift key press status.
     *
     * @since {{VERSION}}
     */


    _createClass(FieldNumber, [{
        key: 'shiftKeyUtility',
        value: function shiftKeyUtility() {
            var _this = this;

            this.shiftKeyDown = false;

            jQuery(document).on('keydown', function (e) {

                if (e.which === 16) {

                    _this.shiftKeyDown = true;
                }
            });

            jQuery(document).on('keyup', function (e) {

                if (e.which === 16) {

                    _this.shiftKeyDown = false;
                }
            });
        }

        /**
         * Sets up the class handlers.
         *
         * @since {{VERSION}}
         */

    }, {
        key: 'setupHandlers',
        value: function setupHandlers() {
            var _this2 = this;

            this.$ui.increase.click(function (e) {

                _this2.increaseNumber(e);
            });

            this.$ui.decrease.click(function (e) {

                _this2.decreaseNumber(e);
            });

            this.$ui.input.change(function (e) {

                _this2.inputExternalChange(e);
            });
        }

        /**
         * Increases the input number.
         *
         * @since {{VERSION}}
         */

    }, {
        key: 'increaseNumber',
        value: function increaseNumber() {

            var amount = this.shiftKeyDown ? this.intervals.increase.alt : this.intervals.increase.normal;
            var newNumber = this.value + amount;

            this.$ui.input.val(newNumber);
            this.$ui.input.trigger('change');
        }

        /**
         * Decreases the input number.
         *
         * @since {{VERSION}}
         */

    }, {
        key: 'decreaseNumber',
        value: function decreaseNumber() {

            var amount = this.shiftKeyDown ? this.intervals.decrease.alt : this.intervals.decrease.normal;
            var newNumber = this.value - amount;

            this.$ui.input.val(newNumber);
            this.$ui.input.trigger('change');
        }

        /**
         * Fires on the input change. Typically from user typing or other scripts modifying.
         *
         * @since {{VERSION}}
         */

    }, {
        key: 'inputExternalChange',
        value: function inputExternalChange() {

            this.validateInput();
        }

        /**
         * Runs number through constrains.
         *
         * @param {int} number
         *
         * @return {Object}
         */

    }, {
        key: 'constrainNumber',
        value: function constrainNumber(number) {

            var status = 'unmodified';

            if (this.constraints.max !== false && number > this.constraints.max) {

                status = 'max';
                number = this.constraints.max;
            } else if (this.constraints.min !== false && number < this.constraints.min) {

                status = 'min';
                number = this.constraints.min;
            }

            return {
                status: status,
                number: number
            };
        }

        /**
         * Runs input value through constraints to ensure it is accurate.
         *
         * @since {{VERSION}}
         */

    }, {
        key: 'validateInput',
        value: function validateInput() {

            var currentValue = this.$ui.input.val();

            // Constrain to numbers
            var matches = currentValue.match(/\d*\.?\d+/);
            currentValue = matches && parseInt(matches[0]) || 0;

            var constraints = this.constrainNumber(currentValue);

            switch (constraints.status) {

                case 'max':

                    this.toggleDecreaseDisabledUI(true);
                    this.toggleIncreaseDisabledUI(false);
                    break;

                case 'min':

                    this.toggleIncreaseDisabledUI(true);
                    this.toggleDecreaseDisabledUI(false);
                    break;

                default:

                    this.toggleIncreaseDisabledUI(true);
                    this.toggleDecreaseDisabledUI(true);

            }

            this.value = constraints.number;
            this.$ui.input.val(this.value);

            if (currentValue !== this.value) {

                this.$ui.input.trigger('change');
            }
        }

        /**
         * Disables/Enables the increase button.
         *
         * @since {{VERSION}}
         *
         * @param {bool} enable True to set to enabled, false to set to disabled
         */

    }, {
        key: 'toggleIncreaseDisabledUI',
        value: function toggleIncreaseDisabledUI(enable) {

            this.$ui.increase.prop('disabled', !enable);
        }

        /**
         * Disables/Enables the decrease button.
         *
         * @since {{VERSION}}
         *
         * @param {bool} enable True to set to enabled, false to set to disabled
         */

    }, {
        key: 'toggleDecreaseDisabledUI',
        value: function toggleDecreaseDisabledUI(enable) {

            this.$ui.decrease.prop('disabled', !enable);
        }
    }]);

    return FieldNumber;
}();

/**
 * Finds and initializes all Number fields.
 *
 * @since {{VERSION}}
 */


var FieldNumberInitialize = function () {

    /**
     * Class constructor.
     *
     * @since {{VERSION}}
     */
    function FieldNumberInitialize() {
        _classCallCheck(this, FieldNumberInitialize);

        var api = this;

        this.fields = [];

        var $fields = jQuery('[data-fieldhelpers-field-number]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since {{VERSION}}
     *
     * @param {jQuery} $field
     */


    _createClass(FieldNumberInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldNumber($field)
            });
        }
    }]);

    return FieldNumberInitialize;
}();

exports.default = FieldNumberInitialize;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Color Picker Field functionality.
 *
 * @since {{VERSION}}
 */
var FieldColorPicker =

/**
 * Class constructor.
 *
 * @since {{VERSION}}
 */
function FieldColorPicker($field) {
    _classCallCheck(this, FieldColorPicker);

    if (!jQuery.isFunction(jQuery.fn.wpColorPicker)) {

        console.error('Field Helpers Error: Trying to initialize Color Picker field but "wp-color-picker" is ' + 'not enqueued.');
        return;
    }

    $field.wpColorPicker();
};

/**
 * Finds and initializes all Color Picker fields.
 *
 * @since {{VERSION}}
 */


var FieldColorPickerInitialize = function () {

    /**
     * Class constructor.
     *
     * @since {{VERSION}}
     */
    function FieldColorPickerInitialize() {
        _classCallCheck(this, FieldColorPickerInitialize);

        var api = this;

        this.fields = [];

        var $fields = jQuery('[data-fieldhelpers-field-colorpicker]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since {{VERSION}}
     *
     * @param {jQuery} $field
     */


    _createClass(FieldColorPickerInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldColorPicker($field)
            });
        }
    }]);

    return FieldColorPickerInitialize;
}();

exports.default = FieldColorPickerInitialize;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Date Picker Field functionality.
 *
 * Also includes Date/Time Picker and Time Picker.
 *
 * @since {{VERSION}}
 */
var FieldDatePicker = function () {

    /**
     * Class constructor.
     *
     * @since {{VERSION}}
     */
    function FieldDatePicker($field) {
        _classCallCheck(this, FieldDatePicker);

        if (!jQuery.isFunction(jQuery.fn.datepicker)) {

            console.error('Field Helpers Error: Trying to initialize Date Picker field but "jquery-ui-datepicker" ' + 'is not enqueued.');
            return;
        }

        this.$field = $field;

        this.timePicker = typeof this.$field.attr('data-timepicker') !== 'undefined';
        this.dateTimePicker = typeof this.$field.attr('data-datetimepicker') !== 'undefined';

        if (this.dateTimePicker && !jQuery.isFunction(jQuery.fn.datetimepicker)) {

            console.error('Field Helpers Error: Trying to initialize Date Picker field but ' + '"rbm-fh-jquery-ui-datetimepicker" is not enqueued.');
            return;
        }

        if (this.timePicker && !jQuery.isFunction(jQuery.fn.timepicker)) {

            console.error('Field Helpers Error: Trying to initialize Date Picker field but ' + '"jquery-ui-datetimepicker" is not enqueued.');
            return;
        }

        this.initializeDatepicker();
    }

    /**
     * Initializes the Date Picker.
     *
     * @since {{VERSION}}
     */


    _createClass(FieldDatePicker, [{
        key: 'initializeDatepicker',
        value: function initializeDatepicker() {

            var name = this.$field.find('input[type="hidden"]').attr('name');
            var option_functions = ['beforeShow', 'beforeShowDay', 'calculateWeek', 'onChangeMonthYear', 'onClose', 'onSelect'];
            var options = {};

            if (RBM_FieldHelpers['datepicker_args_' + name]) {

                options = RBM_FieldHelpers['datepicker_args_' + name];
            }

            // Function support
            jQuery.each(options, function (name, value) {

                if (option_functions.indexOf(name) !== -1 && typeof options[name] !== 'function') {

                    options[name] = window[value];
                }
            });

            options.altField = '[name="' + name + '"]';
            options.altFormat = 'yymmdd';

            if (this.dateTimePicker) {

                options.altTimeFormat = 'HH:mm';
                options.altFieldTimeOnly = false;
                options.timeFormat = 'hh:mm tt';
                options.controlType = 'select';

                this.$field.datetimepicker(options);
            } else if (this.timePicker) {

                options.altTimeFormat = 'HH:mm';
                options.altFieldTimeOnly = false;
                options.timeFormat = 'hh:mm tt';
                options.controlType = 'select';

                this.$field.timepicker(options);
            } else {

                this.$field.datepicker(options);
            }
        }
    }]);

    return FieldDatePicker;
}();

/**
 * Finds and initializes all Date Picker fields.
 *
 * @since {{VERSION}}
 */


var FieldDatePickerInitialize = function () {

    /**
     * Class constructor.
     *
     * @since {{VERSION}}
     */
    function FieldDatePickerInitialize() {
        _classCallCheck(this, FieldDatePickerInitialize);

        var api = this;

        this.fields = [];

        var $fields = jQuery('[data-fieldhelpers-field-datepicker]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since {{VERSION}}
     *
     * @param {jQuery} $field
     */


    _createClass(FieldDatePickerInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldDatePicker($field)
            });
        }
    }]);

    return FieldDatePickerInitialize;
}();

exports.default = FieldDatePickerInitialize;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Table Field functionality.
 *
 * @since {{VERSION}}
 */
var FieldTable = function () {

    /**
     * Class constructor.
     *
     * @since {{VERSION}}
     */
    function FieldTable($field) {
        _classCallCheck(this, FieldTable);

        this.$ui = {
            actions: $field.find('.fieldhelpers-field-table-actions'),
            loading: $field.find('.fieldhelpers-field-table-loading'),
            table: $field.find('table'),
            thead: $field.find('thead'),
            tbody: $field.find('tbody'),
            addRow: $field.find('[data-table-create-row]'),
            addColumn: $field.find('[data-table-create-column]')
        };

        this.l10n = RBM_FieldHelpers.l10n['field_table'] || {};

        this.name = $field.attr('data-table-name');

        this.data = JSON.parse(this.$ui.table.attr('data-table-data'));

        this.setupHandlers();

        // Initial build
        this.buildTable();

        // Show initially
        this.$ui.table.show();
        this.$ui.actions.show();
        this.$ui.loading.hide();
    }

    /**
     * Sets up the class handlers.
     *
     * @since {{VERSION}}
     */


    _createClass(FieldTable, [{
        key: 'setupHandlers',
        value: function setupHandlers() {
            var _this = this;

            var api = this;

            this.$ui.addRow.click(function (e) {

                e.preventDefault();
                _this.addRow();
            });

            this.$ui.addColumn.click(function (e) {

                e.preventDefault();
                _this.addColumn();
            });

            this.$ui.table.on('click', '[data-delete-row]', function (e) {

                var index = jQuery(this).closest('tr').index();

                api.deleteRow(index);
            });

            this.$ui.table.on('click', '[data-delete-column]', function (e) {

                var index = jQuery(this).closest('td').index();

                api.deleteColumn(index);
            });

            this.$ui.table.on('change', 'input[type="text"]', function (e) {

                _this.updateTableData();
            });
        }

        /**
         * Gathers all data from the table.
         */

    }, {
        key: 'updateTableData',
        value: function updateTableData() {

            var api = this;
            var $rows = this.$ui.table.find('tbody tr');
            var data = [];
            var currentRow = 0;

            $rows.each(function () {

                // Skip delete row
                if (jQuery(this).hasClass('fieldhelpers-field-table-delete-columns')) {

                    return true;
                }

                var rowData = [];
                var $cells = jQuery(this).find('td');
                var currentCell = 0;

                $cells.each(function () {

                    // Skip delete cell
                    if (jQuery(this).hasClass('fieldhelpers-field-table-delete-row')) {

                        return true;
                    }

                    var $input = jQuery(this).find('input[name="' + api.name + '[body][' + currentRow + '][' + currentCell + ']"]');

                    if (!$input.length) {

                        console.error('Field Helpers Error: Table data corrupted.');
                        return false;
                    }

                    rowData.push($input.val());

                    currentCell++;
                });

                data.push(rowData);

                currentRow++;
            });

            this.data = data;
        }

        /**
         * Adds a row to the table.
         *
         * @since {{VERSION}}
         */

    }, {
        key: 'addRow',
        value: function addRow() {

            if (!this.data.length) {

                // Push 1 empty row with 1 empty cell
                this.data.push(['']);
            } else {

                var columns = this.data[0].length;
                var row = [];

                for (var i = 0; i < columns; i++) {
                    row.push('');
                }

                this.data.push(row);
            }

            this.buildTable();
        }

        /**
         * Adds a column to the table.
         *
         * @since {{VERSION}}
         */

    }, {
        key: 'addColumn',
        value: function addColumn() {

            if (!this.data.length) {

                // Push 1 empty row with 1 empty cell
                this.data.push(['']);
            } else {

                this.data.map(function (row) {

                    row.push('');
                });
            }

            this.buildTable();
        }

        /**
         * Deletes a row from the table.
         *
         * @since {{VERSION}}
         *
         * @param {int} index Index of row to delete.
         */

    }, {
        key: 'deleteRow',
        value: function deleteRow(index) {

            if (this.data.length === 1) {

                this.data = [];
            } else {

                this.data.splice(index, 1);
            }

            this.buildTable();
        }

        /**
         * Deletes a column from the table.
         *
         * @since {{VERSION}}
         *
         * @param {int} index Index of column to delete.
         */

    }, {
        key: 'deleteColumn',
        value: function deleteColumn(index) {

            if (this.data[0].length === 1) {

                this.data = [];
            } else {

                this.data.map(function (row) {

                    row.splice(index, 1);
                    return row;
                });
            }

            this.buildTable();
        }

        /**
         * Builds the table based on the table data.
         *
         * @since {{VERSION}}
         */

    }, {
        key: 'buildTable',
        value: function buildTable() {
            var _this2 = this;

            this.$ui.tbody.html('');

            if (!this.data.length) {

                this.$ui.tbody.html('');
            } else {

                this.data.map(function (row, row_i) {

                    var $row = jQuery('<tr/>');

                    row.map(function (cell, cell_i) {

                        var $cell = jQuery('<td/>');

                        $cell.append('<input type="text" name="' + _this2.name + '[body][' + row_i + '][' + cell_i + ']" />');

                        $cell.find('input[type="text"]').val(cell);

                        $row.append($cell);
                    });

                    $row.append('<td class="fieldhelpers-field-table-delete-row">' + ('<button type="button" data-delete-row aria-label="' + _this2.l10n['delete_row'] + '">') + '<span class="dashicons dashicons-no" />' + '</button>' + '</td>');

                    _this2.$ui.tbody.append($row);
                });

                var $deleteRow = jQuery('<tr class="fieldhelpers-field-table-delete-columns"></tr>');

                for (var i = 0; i < this.data[0].length; i++) {

                    $deleteRow.append('<td>' + ('<button type="button" data-delete-column aria-label="' + this.l10n['delete_column'] + '">') + '<span class="dashicons dashicons-no" />' + '</button>' + '</td>');
                }

                this.$ui.tbody.append($deleteRow);
            }
        }
    }]);

    return FieldTable;
}();

/**
 * Finds and initializes all Table fields.
 *
 * @since {{VERSION}}
 */


var FieldTableInitialize = function () {

    /**
     * Class constructor.
     *
     * @since {{VERSION}}
     */
    function FieldTableInitialize() {
        _classCallCheck(this, FieldTableInitialize);

        var api = this;

        this.fields = [];

        var $fields = jQuery('[data-fieldhelpers-field-table]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since {{VERSION}}
     *
     * @param {jQuery} $field
     */


    _createClass(FieldTableInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldTable($field)
            });
        }
    }]);

    return FieldTableInitialize;
}();

exports.default = FieldTableInitialize;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Media Field functionality.
 *
 * Also includes Date/Time Picker and Time Picker.
 *
 * @since {{VERSION}}
 */
var FieldMedia = function () {

    /**
     * Class constructor.
     *
     * @since {{VERSION}}
     */
    function FieldMedia($field) {
        _classCallCheck(this, FieldMedia);

        if (!wp.media) {

            console.error('Field Helpers Error: Trying to initialize Date Picker field but media is not enqueued.');
            return;
        }

        this.$ui = {
            input: $field.find('[data-media-input]'),
            addButton: $field.find('[data-add-media]'),
            imagePreview: $field.find('[data-image-preview]'),
            mediaPreview: $field.find('[data-media-preview]'),
            removeButton: $field.find('[data-remove-media]')
        };

        this.mediaFrame = wp.media.frames.meta_image_frame = wp.media({
            title: 'Choose Media'
        });

        this.type = $field.attr('data-type');

        this.imageProperties = {
            previewSize: $field.attr('data-preview-size')
        };

        this.setupHandlers();
    }

    /**
     * Sets up the class handlers.
     *
     * @since {{VERSION}}
     */


    _createClass(FieldMedia, [{
        key: 'setupHandlers',
        value: function setupHandlers() {
            var _this = this;

            this.$ui.addButton.click(function (e) {

                e.preventDefault();
                _this.addMedia();
            });

            this.$ui.removeButton.click(function (e) {

                e.preventDefault();
                _this.removeMedia();
            });

            this.mediaFrame.on('select', function (e) {

                _this.selectMedia();
            });
        }

        /**
         * Opens the media frame to add media.
         *
         * @since {{VERSION}}
         */

    }, {
        key: 'addMedia',
        value: function addMedia() {

            this.mediaFrame.open();
        }

        /**
         * Removes the currently selected media.
         *
         * @since {{VERSION}}
         */

    }, {
        key: 'removeMedia',
        value: function removeMedia() {

            this.$ui.addButton.show();
            this.$ui.removeButton.hide();
            this.$ui.input.val('');

            // Reset preview
            switch (this.type) {

                case 'image':

                    this.$ui.imagePreview.attr('src', this.$ui.imagePreview.data('placeholder') || '');

                    break;

                default:

                    this.$ui.mediaPreview.html(this.$ui.mediaPreview.data('placeholder') || '&nbsp;');
            }
        }

        /**
         * Fires on selecting a piece of media.
         *
         * @since {{VERSION}}
         */

    }, {
        key: 'selectMedia',
        value: function selectMedia() {

            var mediaAttachment = this.mediaFrame.state().get('selection').first().toJSON();

            this.$ui.input.val(mediaAttachment.id);

            this.$ui.addButton.hide();
            this.$ui.removeButton.show();

            // Preview
            switch (this.type) {

                case 'image':

                    var previewUrl = mediaAttachment.url;

                    if (mediaAttachment.sizes[this.imageProperties.previewSize]) {

                        previewUrl = mediaAttachment.sizes[this.imageProperties.previewSize].url;
                    }

                    this.$ui.imagePreview.attr('src', previewUrl);
                    break;

                default:

                    this.$ui.mediaPreview.html(mediaAttachment.url);
            }
        }
    }]);

    return FieldMedia;
}();

/**
 * Finds and initializes all Media fields.
 *
 * @since {{VERSION}}
 */


var FieldMediaInitialize = function () {

    /**
     * Class constructor.
     *
     * @since {{VERSION}}
     */
    function FieldMediaInitialize() {
        _classCallCheck(this, FieldMediaInitialize);

        var api = this;

        this.fields = [];

        var $fields = jQuery('[data-fieldhelpers-field-media]');

        if ($fields.length) {

            $fields.each(function () {

                api.initializeField(jQuery(this));
            });
        }
    }

    /**
     * Initializes the field.
     *
     * @since {{VERSION}}
     *
     * @param {jQuery} $field
     */


    _createClass(FieldMediaInitialize, [{
        key: 'initializeField',
        value: function initializeField($field) {

            this.fields.push({
                $field: $field,
                api: new FieldMedia($field)
            });
        }
    }]);

    return FieldMediaInitialize;
}();

exports.default = FieldMediaInitialize;

/***/ })
/******/ ]);